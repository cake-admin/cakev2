{"ast":null,"code":"var _jsxFileName = \"/Users/quietmike/Documents/GitHub/cakev2/src/themes/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check if theme preference is saved in localStorage\n    const savedTheme = localStorage.getItem('theme');\n    // Check system preference if no saved theme\n    if (!savedTheme) {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    return savedTheme === 'dark';\n  });\n  useEffect(() => {\n    // Save theme preference to localStorage\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    // Update body background color\n    document.body.style.backgroundColor = isDarkMode ? darkTheme.colors.background : lightTheme.colors.background;\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(StyledThemeProvider, {\n      theme: isDarkMode ? darkTheme : lightTheme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"D6t59KtBJDbEOSzhB8p9ZMVzYZQ=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","ThemeProvider","StyledThemeProvider","lightTheme","darkTheme","jsxDEV","_jsxDEV","ThemeContext","children","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","window","matchMedia","matches","setItem","document","body","style","backgroundColor","colors","background","toggleTheme","prev","Provider","value","theme","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/quietmike/Documents/GitHub/cakev2/src/themes/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './theme';\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check if theme preference is saved in localStorage\n    const savedTheme = localStorage.getItem('theme');\n    // Check system preference if no saved theme\n    if (!savedTheme) {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    return savedTheme === 'dark';\n  });\n\n  useEffect(() => {\n    // Save theme preference to localStorage\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    // Update body background color\n    document.body.style.backgroundColor = isDarkMode ? darkTheme.colors.background : lightTheme.colors.background;\n  }, [isDarkMode]);\n\n  const toggleTheme = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n      <StyledThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n        {children}\n      </StyledThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,aAAa,IAAIC,mBAAmB,QAAQ,mBAAmB;AACxE,SAASC,UAAU,EAAEC,SAAS,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,YAAY,gBAAGV,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEO;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,MAAM;IACjD;IACA,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD;IACA,IAAI,CAACF,UAAU,EAAE;MACf,OAAOG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;IAClE;IACA,OAAOL,UAAU,KAAK,MAAM;EAC9B,CAAC,CAAC;EAEFZ,SAAS,CAAC,MAAM;IACd;IACAa,YAAY,CAACK,OAAO,CAAC,OAAO,EAAER,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;IAC5D;IACAS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAGZ,UAAU,GAAGN,SAAS,CAACmB,MAAM,CAACC,UAAU,GAAGrB,UAAU,CAACoB,MAAM,CAACC,UAAU;EAC/G,CAAC,EAAE,CAACd,UAAU,CAAC,CAAC;EAEhB,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACxBd,aAAa,CAACe,IAAI,IAAI,CAACA,IAAI,CAAC;EAC9B,CAAC;EAED,oBACEpB,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAElB,UAAU;MAAEe;IAAY,CAAE;IAAAjB,QAAA,eACxDF,OAAA,CAACJ,mBAAmB;MAAC2B,KAAK,EAAEnB,UAAU,GAAGN,SAAS,GAAGD,UAAW;MAAAK,QAAA,EAC7DA;IAAQ;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACU;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE5B,CAAC;AAACxB,EAAA,CA7BWR,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AA+B1B,OAAO,MAAMkC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGtC,UAAU,CAACQ,YAAY,CAAC;EACxC,IAAI8B,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOF,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}